/*--------------------------------------------------------
[Description]


[Contents]

    Helper Classes
    General Styles
    Layout Elements
    Images
    Color scheme
    Media query mixins
    Own responsive utilities
    Special styles
        Modified styles from bootstrap website (not part of framework) / .bs-callout
        Form grid/columns conditional mixin
        Reference styles

[Imports:]
--------------------------------------------------------*/

@import 'variables.less';
@import 'colors.less';
@import 'extends.less';
//@import (reference) '../bootstrap/bootstrap.less';
@import '../font-awesome-4.1.0/less/font-awesome.less';

/*  Helper classes
----------------------------------------------------------*/

.block {
    display: block;
}

#Clearfix, .Clearfix {
    &:before,
    &:after {
        content: " "; /* 1 */
        display: table; /* 2 */
    }

    &:after {
        clear: both;
    }
}

#Clear{
    content: "";
    display: block;
    clear: both;
    visibility: visible;
}


/*  General styles
----------------------------------------------------------*/

.link {
    color: @link-blue;

    &:hover {
        color: @link-color-hover;
    }
}

/*  Layout elements
----------------------------------------------------------*/

/*  Images
----------------------------------------------------------*/

.ShowImageWithCheckbox () {

    .SelectAreaCheckbox {
        display: block;
    }

    .SelectAreaImageInfo {
        height: 60%;
        top: auto;
        border-top-left-radius: 0;
        border-top-right-radius: 0;
    }
}

.ShowImageWithCheckbox-media-below-sm () {

    .SelectAreaCheckbox {
        height: 100%;
        border-bottom-left-radius: @border-radius-item-image;
        border-bottom-right-radius: @border-radius-item-image;
    }

    .SelectAreaImageInfo {
        display: none;
    }
}

/*  Color scheme
----------------------------------------------------------*/

.ColoredBottomBorder (@color: @memo-green; @border-width: 2px) {
    border-bottom: solid @border-width @color;
    line-height: 130%;
}


/*  Media query mixins
----------------------------------------------------------*/

.media-below-xs(@rules)   {@media(max-width: @screen-xxs-max){ @rules(); }}
.media-xs(@rules)         {@media (min-width: @screen-xs-min) and (max-width: @screen-xs-max) { @rules(); }}
.media-xs-sm(@rules)      {@media (min-width: @screen-xs-min) and (max-width: @screen-sm-max) { @rules(); }}
.media-xs-md(@rules)      {@media (min-width: @screen-xs-min) and (max-width: @screen-md-max) { @rules(); }}
.media-xs-up(@rules)      {@media(min-width: @screen-xs-min){ @rules(); }}
.media-below-sm(@rules)   {@media(max-width: @screen-xs-max){ @rules(); }}
.media-sm(@rules)         {@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) { @rules(); }}
.media-sm-md(@rules)      {@media (min-width: @screen-sm-min) and (max-width: @screen-md-max) { @rules(); }}
.media-sm-up(@rules)      {@media(min-width: @screen-sm-min){ @rules(); }}
.media-below-md(@rules)   {@media(max-width: @screen-sm-max){ @rules(); }}
.media-md(@rules)         {@media (min-width: @screen-md-min) and (max-width: @screen-md-max) { @rules(); }}
.media-md-up(@rules)      {@media(min-width: @screen-md-min){ @rules(); }}
.media-below-lg(@rules)   {@media(max-width: @screen-md-max){ @rules(); }}
.media-lg(@rules)         {@media (min-width: @screen-lg-min) { @rules(); }}



/*  Own responsive utilities
----------------------------------------------------------*/

.xxs-stack {
    @media (max-width: (@screen-xs-min - 1px))  {
        float: none;
        width: 100%;
        margin-left: 0;
        left: 0;
        right: 0;
    }
}

.float-none-xxs {
    @media (max-width: (@screen-xs-min - 1px)) {
        float: none !important;
    }
}

.float-none-xs {
    @media (min-width: @screen-xs-min) {
        float: none !important;
    }
}

.float-none-sm {
    @media (min-width: @screen-sm-min) {
        float: none !important;
    }
}

.float-none-md {
    @media (min-width: @screen-md-min) {
        float: none !important;
    }
}

.float-none-lg {
    @media (min-width: @screen-lg-min) {
        float: none !important;
    }
}

.DesktopHide {
    @media (min-width: @screen-md-min) {
        display: none;
    }
}

.MobileHide {
    @media (max-width: @screen-sm-max) {
        display: none;
    }
}

/*  Mixins
----------------------------------------------------------*/


#tab-color(@outline-color: @light-blue, @font-color: @global-text-color) { 

    .box-with-tabs,
    .boxtainer-outlined-tabs {

        ul.nav-tabs {
            border-bottom-color: @outline-color;

            li {
                a:hover, a:focus {
                    background-color: @outline-color;
                    color: @font-color;
                }

                &.active {
                    a {
                        border-color: @outline-color;
                    }
                }
            }
        }
    }
}

/*Modified styles from bootstrap website (not part of framework)*/

.bs-callout-info {
    background-color: @color-background-lightblue;
    border-color: #5bc0de !important;
}

.bs-callout-danger {
    background-color: @color-background-lightblue;
    border-color: #ce4844 !important;
}

.bs-callout {
    margin: 20px 0;
    padding: 20px;
    border-left: 3px solid #eee;
}

.bs-callout h4 {
    margin-top: 0;
    margin-bottom: 5px;
}

.bs-callout-info h4 {
    color: #5bc0de !important;
}

.bs-callout-danger h4 {
    color: #ce4844 !important;
}

.bs-callout p:last-child {
    margin-bottom: 0;
}

/*Form grid/columns conditional mixin:*/


//Conditional mixin
/*Example for calling:
    
    @labels-stacked: true; //TRUE for having labels stacked

    .FormColumnGrid (@labels-stacked);
    
*/



//Form grid styles with labels stacked

.FormColumnGrid (@labels-stacked: false; @label-width-variable: false; @grid-width-label-xs: 3; @grid-width-controls-full-xs: @grid-columns - @grid-width-label-xs) {

    .columnControlsFull {
        font-size: 90%;

        .radio, .form-control-static, .added-cat {
            font-size: percentage(100/90);
        }
    }

    .FormColumnGridConditional (@labels-stacked) when (@labels-stacked) {

        .columnLabel {
            .make-xs-column(12);
            text-align: left !important;
        }

        .columnControlsFull {
            .make-xs-column(12);

            .radio, .form-control-static {
                margin-left: 20px;
            }

            .form-control-static {
                padding-top: 0;
            }
        }

        .aside .columnControlsFull { 
            .radio, .form-control-static {
                margin-left: 0;
            }
        } 
        /*.columnControlsFull {

            .radio, .form-control-static {
                margin-left: 20px;
                aside {
                    margin-left: 0;
                }
            }
        }*/

        .columnControlsSmall {
            .make-xs-column(6);
            .xxs-stack; //not put out, replacement: see below
        }

        @media (max-width: (@screen-xs-min - 1px)) { //replacement for xxs-stack-mixin
            .columnControlsSmall {
                float: none;
                width: 100%;
                margin-left: 0;
            }
        }

        .noLabel {
            margin-left: 0;
        }

        .radio {
            margin-left: 20px;
        }

        .added-cat.SingleSelect {
            margin-left: 20px;
        }

        input.form-control, textarea.form-control, select.form-control {
            max-width: 400px;
        }
    }
    //Form grid styles with labels as seperate column
    .FormColumnGridConditional(@labels-stacked) when (default()) {

        .columnLabel {
            .make-xs-column(@grid-width-label-xs);
            .xxs-stack; //not put out, replacement: see below
        }

        .columnControlsFull {
            .xxs-stack; //not put out, replacement: see below
            .make-xs-column(@grid-width-controls-full-xs);

            .aside & {
                .make-md-column(@grid-columns);
            }
        }
        //Label-width-variable: true can be used together with labels-stacked: false, lets controls break to a new line, if label text is longer than the width reserved for labels
        .LabelWidth (@label-width-variable) when (@label-width-variable) {

            @media (min-width: @screen-xs-min) {
                .columnLabel {
                    width: auto;
                    padding-right: 0;
                }

                .columnControlsFull {
                    padding-left: 3px;
                    float: right;
                }
            }
        }

        .LabelWidth (@label-width-variable) when (default()) {
            .columnLabel {
                -ms-word-break: break-all;
                word-break: break-all;

                .tooltip {
                    -ms-word-break: normal;
                    word-break: normal;
                }
            }
        }

        .LabelWidth (@label-width-variable);


        .columnControlsSmall {
            .make-xs-column(1);
            width: percentage(1/@grid-columns*@grid-width-controls-full-xs/2);
            .xxs-stack; //not put out, replacement: see below
        }

        @media (max-width: (@screen-xs-min - 1px)) { //replacement for xxs-stack-mixin
            .columnLabel, .columnControlsFull, .columnControlsSmall {
                float: none;
                width: 100%;
                margin-left: 0;
            }
        }


        @media (min-width: @screen-xs-min) { //replaces offset-column-mixin
            .noLabel {
                margin-left: percentage(@grid-width-label-xs/@grid-columns);
            }
        }
    }

    .FormColumnGridConditional(@labels-stacked);
}

/*Reference styles*/

.ReferenceDefault{
    .Reference {

        &.DailyIssue {
            .PublicationDate {
                display: none;
            }
        }

        .Pages {
            //display: inline-block !important;//To avoid line break inside
        }
    }
}

.ReferenceAllInlineButAuthorStyle{

    .ReferenceDefault;

    .Reference {
        div:not(.Name):not(.Author) {
            display: inline;
        }
        div:not(:last-child):not(.Name):not(.Author):not(.Icon):not(.NoSeperator):not(.tooltip):not(.tooltip-arrow):not(.tooltip-inner):after {
            content: ",\0000a0";
        }
    }
}

.ReferenceAllInlineStyle {
    .ReferenceDefault;

    .Reference {
        div:not(.Name):not(.Icon) {
            display: inline;
        }

        .Icon {
            float: left;
            margin-right: 5px;
        }

        div:not(:last-child):not(.Name):not(.Author):not(.Icon):not(.NoSeperator):not(.tooltip):not(.tooltip-arrow):not(.tooltip-inner):after {
            content: ",\0000a0";
        }

        div.Author:after {
            content: ".\0000a0";
        }

        .Url, .WikiUrl {
            display: inline-block !important;
            max-width: 100%;
            overflow-x: hidden;
            -ms-text-overflow: ellipsis;
            -o-text-overflow: ellipsis;
            text-overflow: ellipsis;
            vertical-align: bottom; //http://stackoverflow.com/questions/20566710/overflowhidden-displayinline-block-moves-text-upwards#answer-20566810
        }
    }
}

/*Have user inputs/existing data in forms bold when in editing mode*/

.MakeContentsBoldInEditingForm() {
     
    [data-is-editing="True"] {
        .RequiredField {
            font-weight: normal;
        }

        .JS-RelatedCategories {
            font-weight: bold;
        }

         .JS-RelatedCategories div.tooltip {
            font-weight: normal;
        }

        .ParentCategories .form-control-static {
            font-weight: bold;

            div.tooltip {
                font-weight: normal;
            }
        }

        input[type="text"], textarea[type="text"] { //Code redundancy because of rules with &-selector not being output when inside called mixin (https://github.com/less/less.js/issues/1979)
            font-weight: bold;
        }

        input::-webkit-input-placeholder, textarea::-webkit-input-placeholder { /* WebKit browsers */
            font-weight: normal;
        }

        input:-moz-placeholder, textarea:-moz-placeholder { /* Mozilla Firefox 4 to 18 */
            font-weight: normal;  
        }

        input::-moz-placeholder, textarea::-moz-placeholder { /* Mozilla Firefox 19+ */
            font-weight: normal;
        }

        input:-ms-input-placeholder, textarea:-ms-input-placeholder { /* Internet Explorer 10+ */
            font-weight: normal;
        }
    }
}
