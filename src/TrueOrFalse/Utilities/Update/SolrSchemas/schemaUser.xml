<?xml version="1.0" encoding="UTF-8" ?>
<!--  
 PERFORMANCE NOTE: 

  - remove all unneeded copyField statements
  - for best index size and searching performance, set "index" to false
    for all general text fields, use copyField to copy them to the
    catchall "text" field, and use that for searching.
  - For maximum indexing performance, use the StreamingUpdateSolrServer
    java client.
  - Remember to run the JVM in server mode, and use a higher logging level
    that avoids logging every request
-->

<schema name="user" version="0.1">
    <!-- attribute "name" is the name of this schema and is only used for display purposes.
       version="x.y" is Solr's version number for the schema syntax and 
       semantics.  It should not normally be changed by applications.

       1.0: multiValued attribute did not exist, all fields are multiValued 
            by nature
       1.1: multiValued attribute introduced, false by default 
       1.2: omitTermFreqAndPositions attribute introduced, true by default 
            except for text fields.
       1.3: removed optional field compress feature
       1.4: autoGeneratePhraseQueries attribute introduced to drive QueryParser
            behavior when a single string produces multiple tokens.  Defaults 
            to off for version >= 1.4
       1.5: omitNorms defaults to true for primitive field types 
            (int, float, boolean, string...)
     -->

    <fields>
        <!-- Valid attributes for fields:
             name: mandatory - the name for the field
             type: mandatory - the name of a field type from the 
             <types> fieldType section
             indexed: true if this field should be indexed (searchable or sortable)
             stored: true if this field should be retrievable
             multiValued: true if this field may contain multiple values per document
             omitNorms: (expert) set to true to omit the norms associated with
             this field (this disables length normalization and index-time
             boosting for the field, and saves some memory).  Only full-text
             fields or fields that need an index-time boost need norms.
             Norms are omitted for primitive (non-analyzed) types by default.
             termVectors: [false] set to true to store the term vector for a
             given field.
             When using MoreLikeThis, fields used for similarity should be
             stored for best performance.
             termPositions: Store position information with the term vector.  
             This will increase storage costs.
             termOffsets: Store offset information with the term vector. This 
             will increase storage costs.
             required: The field is required.  It will throw an error if the
             value does not exist
             default: a value that should be used if no value is specified
             when adding a document.
        -->

        <!-- field names should consist of alphanumeric or underscore characters only and
             not start with a digit.  This is not currently strictly enforced,
             but other field names will not have first class support from all components
             and back compatibility is not guaranteed.  Names with both leading and
             trailing underscores (e.g. _version_) are reserved.
           -->
        <field name="Id" type="int" indexed="true" stored="true" required="true" multiValued="false" />
        <field name="Name" type="textExact" indexed="true" stored="false" multiValued="false" />
	
        <field name="DateCreated" type="date" indexed="true" stored="false" multiValued="false"/>

        <field name="Rank" type="int" indexed="true" stored="false" multiValued="false"/>
        <field name="WishCountQuestions" type="int" indexed="true" stored="false" multiValued="false"/>

        <field name="_version_" type="long" indexed="true" stored="true" multiValued="false"/>
    </fields>


    <!-- Field to use to determine and enforce document uniqueness. 
        Unless this field is marked with required="false", it will be a required field
    -->
    <uniqueKey>Id</uniqueKey>

    <types>

        <!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
        <fieldType name="string" class="solr.StrField" sortMissingLast="true" />

        <!-- boolean type: "true" or "false" -->
        <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>

        <!-- Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types. -->
        <fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0"/>
        <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0"/>
        <fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0"/>
        <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0"/>

       <!--
         Numeric field types that index each value at various levels of precision
         to accelerate range queries when the number of values between the range
         endpoints is large. See the javadoc for NumericRangeQuery for internal
         implementation details.

         Smaller precisionStep values (specified in bits) will lead to more tokens
         indexed per value, slightly larger index size, and faster range queries.
         A precisionStep of 0 disables indexing at different precision levels.
        -->
        <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0"/>
        <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0"/>
        <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0"/>
        <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0"/>

        <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime    
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day
                      
         Consult the DateField javadocs for more information.

         Note: For faster range queries, consider the tdate type
        -->
        <fieldType name="date" class="solr.TrieDateField" precisionStep="0" positionIncrementGap="0"/>

        <!-- A Trie based date field for faster date range queries and date faceting. -->
        <fieldType name="tdate" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0"/>

        <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
        <fieldtype name="binary" class="solr.BinaryField"/>

        <!-- A text field that only splits on whitespace for exact matching of words -->
        <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            </analyzer>
        </fieldType>

        <fieldType name="textStemmed" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" format="snowball" enablePositionIncrements="true"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.GermanNormalizationFilterFactory"/>
                <filter class="solr.GermanLightStemFilterFactory"/>
                <!-- less aggressive: <filter class="solr.GermanMinimalStemFilterFactory"/> -->
                <!-- more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="German2"/> -->
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
        </fieldType>
		
        <fieldType name="textExact" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" format="snowball" enablePositionIncrements="true"/>
                <!--<filter class="solr.LowerCaseFilterFactory"/>-->
                <!-- less aggressive: <filter class="solr.GermanMinimalStemFilterFactory"/> -->
                <!-- more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="German2"/> -->
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
        </fieldType>		

        <fieldtype name="phonetic" stored="false" indexed="true" class="solr.TextField" >
            <analyzer>
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
            </analyzer>
        </fieldtype>

        <fieldtype name="payloads" stored="false" indexed="true" class="solr.TextField" >
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <!-- The DelimitedPayloadTokenFilter can put payloads on tokens... for example,
                     a token of "foo|1.4"  would be indexed as "foo" with a payload of 1.4f
                     Attributes of the DelimitedPayloadTokenFilterFactory : 
                     "delimiter" - a one character delimiter. Default is | (pipe)
	                 "encoder" - how to encode the following value into a playload
	                 float -> org.apache.lucene.analysis.payloads.FloatEncoder,
	                 integer -> o.a.l.a.p.IntegerEncoder
	                 identity -> o.a.l.a.p.IdentityEncoder
                     Fully Qualified class name implementing PayloadEncoder, Encoder must have a no arg constructor.
                     -->
                <filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
            </analyzer>
        </fieldtype>

        <!-- 
          Example of using PathHierarchyTokenizerFactory at index time, so
          queries for paths match documents at that path, or in descendent paths
        -->
        <fieldType name="descendent_path" class="solr.TextField">
            <analyzer type="index">
                <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/" />
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.KeywordTokenizerFactory" />
            </analyzer>
        </fieldType>
        <!-- 
          Example of using PathHierarchyTokenizerFactory at query time, so
          queries for paths match documents at that path, or in ancestor paths
        -->
        <fieldType name="ancestor_path" class="solr.TextField">
            <analyzer type="index">
                <tokenizer class="solr.KeywordTokenizerFactory" />
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/" />
            </analyzer>
        </fieldType>
    </types>
</schema>